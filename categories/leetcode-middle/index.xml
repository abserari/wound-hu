<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode-middle on Wound</title>
    <link>/categories/leetcode-middle/</link>
    <description>Recent content in leetcode-middle on Wound</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Dec 2018 13:09:34 +0800</lastBuildDate>
    
	<atom:link href="/categories/leetcode-middle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>三数之和</title>
      <link>/blog/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Wed, 12 Dec 2018 13:09:34 +0800</pubDate>
      
      <guid>/blog/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description> 问题描述 给定一个包含 *n* 个整数的数组 nums，判断 nums 中是否存在三个元素 *a，b，c ，*使得 *a + b + c = *0 ？找出所有满足条件且不重复的三元组。
注意：答案中不可以包含重复的三元组。
示例 例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]， 满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]  思路及实现 func threeSum(nums []int) [][]int { // 排序后，可以按规律查找 sort.Ints(nums) res := [][]int{} for i := range nums { // 避免添加重复的结果 // i&amp;gt;0 是为了防止nums[i-1]溢出 if i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i-1] { continue } l, r := i+1, len(nums)-1 for l &amp;lt; r { s := nums[i] + nums[l] + nums[r] switch { case s &amp;lt; 0: // 较小的 l 需要变大 l++ case s &amp;gt; 0: // 较大的 r 需要变小 r-- default: res = append(res, []int{nums[i], nums[l], nums[r]}) // 为避免重复添加，l 和 r 都需要移动到不同的元素上。 l, r = next(nums, l, r) } } } return res } func next(nums []int, l, r int) (int, int) { for l &amp;lt; r { switch { case nums[l] == nums[l+1]: l++ case nums[r] == nums[r-1]: r-- default: l++ r-- return l, r } } return l, r } } else { j++ for j &amp;lt; k &amp;amp;&amp;amp; nums[j-1] == nums[j] { j++ } } } } return result }  </description>
    </item>
    
    <item>
      <title>字符串的排列</title>
      <link>/blog/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</link>
      <pubDate>Sun, 09 Dec 2018 17:06:03 +0800</pubDate>
      
      <guid>/blog/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</guid>
      <description> 问题描述 给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。
换句话说，第一个字符串的排列之一是第二个字符串的子串。
示例1 输入: s1 = &amp;quot;ab&amp;quot; s2 = &amp;quot;eidbaooo&amp;quot; 输出: True 解释: s2 包含 s1 的排列之一 (&amp;quot;ba&amp;quot;).  示例2 输入: s1= &amp;quot;ab&amp;quot; s2 = &amp;quot;eidboaoo&amp;quot; 输出: False  注意：
 输入的字符串只包含小写字母 两个字符串的长度都在 [1, 10,000] 之间  思路 滑动窗口 实现 func checkInclusion(s1 string, s2 string) bool { n1 := len(s1) n2 := len(s2) if n1 &amp;gt; n2 { return false } h1 := 0 h2 := 0 for i := 0; i &amp;lt; n1; i++ { c1 := s1[i] - &#39;a&#39; c2 := s2[i] - &#39;a&#39; h1 += 1 &amp;lt;&amp;lt; c1 h2 += 1 &amp;lt;&amp;lt; c2 } if h1 == h2 { return true } for i := n1; i &amp;lt; n2; i++ { cb := s2[i-n1] - &#39;a&#39; ce := s2[i] - &#39;a&#39; h2 += (1 &amp;lt;&amp;lt; ce) - (1 &amp;lt;&amp;lt; cb) if h1 == h2 { return true } } return false }  </description>
    </item>
    
    <item>
      <title>两数相加</title>
      <link>/blog/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Sun, 09 Dec 2018 17:05:31 +0800</pubDate>
      
      <guid>/blog/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>问题描述 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) 输出：7 -&amp;gt; 0 -&amp;gt; 8 原因：342 + 465 = 807  思路 我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐位相加的过程。
图1，对两数相加方法的可视化: 342 + 465 = 807342+465=807， 每个结点都包含一个数字，并且数字按位逆序存储。
请特别注意以下情况      测试用例  说明    l1=[0,1]l1=[0,1] l2=[0,1,2]l2=[0,1,2]   当一个列表比另一个列表长时。    l1=[]l1=[] l2=[0,1]l2=[0,1]   当一个列表为空时，即出现空列表。    l1=[9,9]l1=[9,9] l2=[1]l2=[1]   求和运算最后可能出现额外的进位，这一点很容易被遗忘      实现 func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode { resPre := &amp;amp;ListNode{} cur := resPre carry := 0 for l1 !</description>
    </item>
    
    <item>
      <title>盛最多水的容器</title>
      <link>/blog/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Sun, 09 Dec 2018 17:04:59 +0800</pubDate>
      
      <guid>/blog/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description> 问题描述 给定 *n* 个非负整数 a~1~，a~2，~&amp;hellip;，a~n，~每个数代表坐标中的一个点 (i, ai) 。在坐标内画 *n* 条垂直线，垂直线 *i* 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 *x* 轴共同构成的容器可以容纳最多的水。
说明：你不能倾斜容器，且 *n* 的值至少为 2。
图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
示例 1 输入: [1,8,6,2,5,4,8,3,7] 输出: 49  思路 遍历 直接遍历每对可能出现的线段组合并找出这些情况之下的最大面积。
双指针 两线段之间形成的区域总是会受到其中较短那条长度的限制。此外，两线段距离越远，得到的面积就越大。 在线段长度构成的数组中使用两个指针，一个放在开始，一个置于末尾。 此外，我们会使用变量 maxArea来持续存储到目前为止所获得的最大面积。 找出指针所指向的两条线段形成的区域，更新 maxArea，并将指向较短线段的指针向较长线段那端移动一步。
实现 遍历 func maxArea(height []int) int { var maxArea int var curArea int for i := 0; i &amp;lt; len(height)-1; i++ { for j := 0; j &amp;lt; len(height); j++ { if height[i]&amp;gt;height[j] { curArea = (j-i)*height[j] }else { curArea = (j-i)*height[i] } if curArea &amp;gt; maxArea { maxArea = curArea } } } return maxArea }  双指针 func maxArea(height []int) int { maxArea := 0 for i, j := 0, len(height)-1; i &amp;lt; j; { if height[i] &amp;lt;= height[j] { curArea := height[i] * (j - i) if curArea &amp;gt; maxArea { maxArea = curArea } i++ } else { curArea := height[j] * (j - i) if curArea &amp;gt; maxArea { maxArea = curArea } j-- } } return area }  </description>
    </item>
    
    <item>
      <title>旋转图像</title>
      <link>/blog/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</link>
      <pubDate>Sun, 09 Dec 2018 17:04:02 +0800</pubDate>
      
      <guid>/blog/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</guid>
      <description>问题描述 给定一个 *n *× *n* 的二维矩阵表示一个图像。
将图像顺时针旋转 90 度。
说明 你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。
示例 1 给定 matrix = [ [1,2,3], [4,5,6], [7,8,9] ], 原地旋转输入矩阵，使其变为: [ [7,4,1], [8,5,2], [9,6,3] ]  示例 2 给定 matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], 原地旋转输入矩阵，使其变为: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ]  思路 分治法（可能） 该题意，可以把一个四边形框四个角上的元素逐个交换，顺序调整框的大小和位置，进行操作
数学法（？） 可以看出，旋转90度实际上是将矩阵先转置，然后进行列的交换</description>
    </item>
    
    <item>
      <title>无重复字符的最长字串</title>
      <link>/blog/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</link>
      <pubDate>Sun, 09 Dec 2018 17:03:34 +0800</pubDate>
      
      <guid>/blog/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</guid>
      <description>问题描述 给定一个字符串，找出不含有重复字符的最长子串的长度。
示例 1 输入: &amp;quot;abcabcbb&amp;quot; 输出: 3 解释: 无重复字符的最长子串是 &amp;quot;abc&amp;quot;，其长度为 3。  示例 2 输入: &amp;quot;bbbbb&amp;quot; 输出: 1 解释: 无重复字符的最长子串是 &amp;quot;b&amp;quot;，其长度为 1。  示例 3 输入: &amp;quot;pwwkew&amp;quot; 输出: 3 解释: 无重复字符的最长子串是 &amp;quot;wke&amp;quot;，其长度为 3。 请注意，答案必须是一个子串，&amp;quot;pwke&amp;quot; 是一个子序列 而不是子串。  思路 滑动窗口 使用 整数数组用asc2码表示字符 将字符存储在当前窗口 [i,j)（最初 j=i）中。 滑动索引 j，如果它不在 整数数组标记中，继续滑动 j 向后查找 如果 s[j]在 [i,j)范围内有与 j′重复的字符， 直接跳过 [i，j′]范围内的所有元素，并将 i变为 j′+1。
实现 滑动窗口 func lengthOfLongestSubstring(s string) int { length := len(s) num := 0 ascii := [128]int{} i := 0 for j := 0; j &amp;lt; length; j++ { tmp := ascii[s[j]] if tmp &amp;gt; i { i = tmp } tmp = j - i + 1 if tmp &amp;gt; num { num = tmp } ascii[s[j]] = j + 1 } return num }  滑动二 func lengthOfLongestSubstring(s string) int { // location[s[i]] == j 表示： // s中第i个字符串，上次出现在s的j位置，所以，在s[j+1:i]中没有s[i] // location[s[i]] == -1 表示： s[i] 在s中第一次出现 location := [256]int{} // 只有256长是因为，假定输入的字符串只有ASCII字符 for i := range location { location[i] = -1 // 先设置所有的字符都没有见过 } maxLen, left := 0, 0 for i := 0; i &amp;lt; len(s); i++ { // 说明s[i]已经在s[left:i+1]中重复了 // 并且s[i]上次出现的位置在location[s[i]] if location[s[i]] &amp;gt;= left { left = location[s[i]] + 1 // 在s[left:i+1]中去除s[i]字符及其之前的部分 } else if i+1-left &amp;gt; maxLen { // fmt.</description>
    </item>
    
    <item>
      <title>删除链表中的倒数第N个节点</title>
      <link>/blog/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sun, 09 Dec 2018 17:02:34 +0800</pubDate>
      
      <guid>/blog/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>问题描述 给定一个链表，删除链表的倒数第 *n *个节点，并且返回链表的头结点。
示例 1 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.  说明 给定的 *n* 保证是有效的。
进阶 你能尝试使用一趟扫描实现吗？
思路 一趟扫描，通过使用两个相距定长 n 的指针，同时向后移动，当后面的指针指到链表的尾部的时候，该指针正好指向需要删除的倒数第 n 个节点
实现 Go 版本 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func removeNthFromEnd(head *ListNode, n int) *ListNode { p := &amp;amp;ListNode{Val: 0, Next: head} q := p qhead := q for i := 0; i &amp;lt; n; i++ { p = p.</description>
    </item>
    
    <item>
      <title>岛屿的个数</title>
      <link>/blog/%E5%B2%9B%E5%B1%BF%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Sun, 09 Dec 2018 17:01:51 +0800</pubDate>
      
      <guid>/blog/%E5%B2%9B%E5%B1%BF%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description> 问题描述 给定一个由 &#39;1&#39;（陆地）和 &#39;0&#39;（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。
示例 1 输入: 11110 11010 11000 00000 输出: 1  示例 2 输入: 11000 11000 00100 00011 输出: 3  思路 遍历每一个网格，如果存在，则以此为起点，向4个方向扩张，如果是岛屿&amp;rsquo;1&amp;rsquo;就置为&amp;rsquo;0&amp;rsquo;，表示这个岛屿是刚才的岛屿的一部分。最后返回 island 的个数
实现 Go 版本 func numIslands(grid [][]byte) int { islands := 0 for i,_ := range grid { for j,_ := range grid[i]{ if grid[i][j] == &#39;1&#39; { islands++ expandIsland(grid, i, j) } } } return islands } func expandIsland(grid [][]byte, m int, n int){ if m &amp;gt;= 0 &amp;amp;&amp;amp; m &amp;lt; len(grid) &amp;amp;&amp;amp; n &amp;gt;= 0 &amp;amp;&amp;amp; n &amp;lt; len(grid[m]) &amp;amp;&amp;amp; grid[m][n] == &#39;1&#39; { grid[m][n] = &#39;0&#39; expandIsland(grid, m-1, n) expandIsland(grid, m+1, n) expandIsland(grid, m, n-1) expandIsland(grid, m, n+1) } }  </description>
    </item>
    
    <item>
      <title>环形数组循环</title>
      <link>/blog/%E7%8E%AF%E5%BD%A2%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 09 Dec 2018 17:01:20 +0800</pubDate>
      
      <guid>/blog/%E7%8E%AF%E5%BD%A2%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF/</guid>
      <description>问题描述 给定一组含有正整数和负整数的数组。如果某个索引中的 n 是正数的，则向前移动 n 个索引。相反，如果是负数(-n)，则向后移动 n 个索引。
假设数组首尾相接。判断数组中是否有环。环中至少包含 2 个元素。环中的元素一律“向前”或者一律“向后”。
注意：给定数组保证不包含元素&amp;rdquo;0&amp;rdquo;。
示例 1 给定数组[-1, 2], 没有循环。  示例 2 给定数组 [2, -1, 1, 2, 2], 有一个循环，从索引 0 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 0。  思路 这里的循环必须是只向前或者只向后形成循环，即一个循环中，都是正数或者负数。 根据坐标建立一对一的映射，一旦某个达到的坐标已经有映射了，说明环存在。 建立一个 v 数组，来记录访问过的数字，然后遍历原数组，如果当前数字已经访问过了，直接跳过，否则就以当前位置坐标为起始点开始查找 将当前位置在 v 数组中标记 true ，然后查找当前位置坐标加上对应的数字的新索引，由于是循环数组，所以结果可能会超出数组的长度，所以要对数组长度取余。（数字可能是负数，补上一个n，使其变为正数） 检查：如果 next 和 cur 相等，说明此时是一个数字的循环，弃掉 如果一个循环中不全是负数或正数，也要弃掉
实现 Go 版本 func circularArrayLoop(nums []int) bool { m := make(map[int]int) n := len(nums) v := make([]bool, n) for i := 0; i &amp;lt; n; i++ { if v[i] { continue } cur := i for { v[cur] = true next := (cur + nums[cur]) % n if next &amp;lt; 0 { next += n } if next == cur || nums[next]*nums[cur] &amp;lt; 0 { break } if m[next] !</description>
    </item>
    
    <item>
      <title>搜索旋转排序数组</title>
      <link>/blog/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 09 Dec 2018 17:00:36 +0800</pubDate>
      
      <guid>/blog/%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description> 问题描述 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
你可以假设数组中不存在重复的元素。
你的算法时间复杂度必须是 O(log n) 级别。
示例 1 输入: nums = [4,5,6,7,0,1,2], target = 0 输出: 4  示例 2 输入: nums = [4,5,6,7,0,1,2], target = 3 输出: -1  思路 二分
实现 二分法 func search(nums []int, target int) int { left, right := 0, len(nums) - 1 for left &amp;lt;= right { mid := (left + right) / 2 if nums[mid] == target { return mid } // 左边部分数组递增 if nums[mid] &amp;gt;= nums[left] { // target在递增数组中 if nums[left] &amp;lt;= target &amp;amp;&amp;amp; target &amp;lt; nums[mid] { right = mid - 1 } else { left = mid + 1 } } else { if nums[mid] &amp;lt; target &amp;amp;&amp;amp; target &amp;lt;= nums[right] { left = mid + 1 } else { right = mid - 1 } } } return -1 }  </description>
    </item>
    
    <item>
      <title>打家劫舍II</title>
      <link>/blog/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Dii/</link>
      <pubDate>Sun, 09 Dec 2018 16:58:37 +0800</pubDate>
      
      <guid>/blog/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Dii/</guid>
      <description> 问题描述 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1 输入: [2,3,2] 输出: 3 解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。  示例 2 输入: [1,2,3,1] 输出: 4 解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。 偷窃到的最高金额 = 1 + 3 = 4 。  思路 分两种情况讨论，数组第一个偷的情况和第一个不偷的情况
实现 方法一 func rob(nums []int) int { switch size { case 0: return 0 case 1: return nums[0] } m := make([]int, 2) m[0] = nums[0] m[1] = max(nums[0], nums[1]) for i := 2; i &amp;lt; len(nums)-1; i++ { m = append(m, max(m[i-1], m[i-2]+nums[i])) } n := make([]int, 2) nums[0] = 0 n[0] = nums[0] n[1] = max(nums[1], nums[0]) for j := 2; j &amp;lt; len(nums); j++ { n = append(n, max(n[j-1], n[j-2]+nums[j])) } return max(m[len(nums)-2], n[len(nums)-1]) } func max(a, b int) int { if a &amp;gt; b { return a } return b }  </description>
    </item>
    
    <item>
      <title>打家劫舍III</title>
      <link>/blog/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Diii/</link>
      <pubDate>Sun, 09 Dec 2018 16:58:30 +0800</pubDate>
      
      <guid>/blog/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8Diii/</guid>
      <description>问题描述 在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。
计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。
示例 1 输入: [3,2,3,null,3,null,1] 3 / \ 2 3 \ \ 3 1 输出: 7 解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.  示例 2 输入: [3,4,5,1,3,null,1] 3 / \ 4 5 / \ \ 1 3 1 输出: 9 解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.  思路 回溯 每一个根节点讨论是否选与不选，比较左右孩子节点值之和 和 没有左右孩子节点之和，选取大的计入 这种方法重复计算了很多地方，比如要完成一个节点的计算，就得一直找左右子节点计算，消耗时间过多
所以使用一个 map 存储已经算过的节点
实现 回溯 func rob(root *TreeNode) int { m := make(map[*TreeNode]int) return dfs(root, m) } func dfs(root *TreeNode, m map[*TreeNode]int) int { if root == nil { return 0 } if m[root] !</description>
    </item>
    
    <item>
      <title>移动K位数字</title>
      <link>/blog/%E7%A7%BB%E5%8A%A8k%E4%BD%8D%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 09 Dec 2018 16:57:36 +0800</pubDate>
      
      <guid>/blog/%E7%A7%BB%E5%8A%A8k%E4%BD%8D%E6%95%B0%E5%AD%97/</guid>
      <description>问题描述 给定一个以字符串表示的非负整数 *num*，移除这个数中的 *k *位数字，使得剩下的数字最小。
注意:
 *num* 的长度小于 10002 且 ≥ k。 *num* 不会包含任何前导零。  __示例 1 __ 输入: num = &amp;quot;1432219&amp;quot;, k = 3 输出: &amp;quot;1219&amp;quot; 解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。  __示例 2 __ 输入: num = &amp;quot;10200&amp;quot;, k = 1 输出: &amp;quot;200&amp;quot; 解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。  示例__ 3 __ 输入: num = &amp;quot;10&amp;quot;, k = 2 输出: &amp;quot;0&amp;quot; 解释: 从原数字移除所有的数字，剩余为空就是0。  思路 贪心</description>
    </item>
    
    <item>
      <title>Pow(x,n)</title>
      <link>/blog/pow/</link>
      <pubDate>Sun, 09 Dec 2018 16:56:56 +0800</pubDate>
      
      <guid>/blog/pow/</guid>
      <description>问题描述 给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。
示例 1 输入: [2,3,1,1,4] 输出: true 解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。  示例 2 输入: [3,2,1,0,4] 输出: false 解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。  思路 动规 假设位置i(0≤i≤A.length)i(0≤i≤A.length)能够跳跃的最大长度为dp[i]。 对于数组A = [2,3,1,1,4]， 则有： i = 0, dp[0] = A[0] + 0 = 2 i = 1, if dp[i-1] ≥ i then dp[1] = max{A[1]+1,dp[0]} else dp[1] = 0 i = 2, if dp[i-1] ≥ i then dp[2] = max{A[2]+2,dp[1]} else dp[2] = 0 类推</description>
    </item>
    
    <item>
      <title>跳跃游戏</title>
      <link>/blog/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Sun, 09 Dec 2018 16:54:49 +0800</pubDate>
      
      <guid>/blog/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</guid>
      <description>问题描述 给定一个非负整数数组，你最初位于数组的第一个位置。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个位置。
示例 1 输入: [2,3,1,1,4] 输出: true 解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。  示例 2 输入: [3,2,1,0,4] 输出: false 解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。  思路 动规 假设位置i(0≤i≤A.length)i(0≤i≤A.length)能够跳跃的最大长度为dp[i]。 对于数组A = [2,3,1,1,4]， 则有： i = 0, dp[0] = A[0] + 0 = 2 i = 1, if dp[i-1] ≥ i then dp[1] = max{A[1]+1,dp[0]} else dp[1] = 0 i = 2, if dp[i-1] ≥ i then dp[2] = max{A[2]+2,dp[1]} else dp[2] = 0 类推</description>
    </item>
    
    <item>
      <title>Z字形变换</title>
      <link>/blog/z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</link>
      <pubDate>Sun, 09 Dec 2018 16:52:40 +0800</pubDate>
      
      <guid>/blog/z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</guid>
      <description>问题描述 将字符串 &amp;quot;PAYPALISHIRING&amp;quot; 以Z字形排列成给定的行数：
P A H N A P L S I I G Y I R  之后从左往右，逐行读取字符：&amp;quot;PAHNAPLSIIGYIR&amp;quot;
实现一个将字符串进行指定行数变换的函数:
string convert(string s, int numRows);  示例 1 输入: s = &amp;quot;PAYPALISHIRING&amp;quot;, numRows = 3 输出: &amp;quot;PAHNAPLSIIGYIR&amp;quot;  示例 2 输入: s = &amp;quot;PAYPALISHIRING&amp;quot;, numRows = 4 输出: &amp;quot;PINALSIGYAHRPI&amp;quot; 解释: P I N A L S I G Y A H R P I  思路 方法一 按照与逐行读取 Z 字形图案相同的顺序访问字符串。 首先访问 行 0中的所有字符，接着访问 行 1，然后 行 2，依此类推&amp;hellip; 对于所有整数 k， * 行 0 中的字符位于索引k(2⋅numRows−2) 处; * 行 numRows−1 中的字符位于索引 k(2⋅numRows−2)+numRows−1 处; * 内部的行 i 中的字符位于索引k(2⋅numRows−2)+i 以及 (k+1)(2⋅numRows−2)−i 处;</description>
    </item>
    
    <item>
      <title>最小路径和</title>
      <link>/blog/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</link>
      <pubDate>Sun, 09 Dec 2018 16:51:58 +0800</pubDate>
      
      <guid>/blog/%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</guid>
      <description> 问题描述 给定一个包含非负整数的 *m* x *n* 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。
示例 输入: [ [1,3,1], [1,5,1], [4,2,1] ] 输出: 7 解释: 因为路径 1→3→1→1→1 的总和最小。  实现 func minPathSum(grid [][]int) int { m := len(grid) n := len(grid[0]) for i,rows := range grid { for j := range rows { if i == 0 { if j != 0 { grid[i][j] += grid[i][j - 1] } } else if j == 0 { grid[i][j] += grid[i-1][j] } else { if grid[i][j-1] &amp;lt; grid[i-1][j] { grid[i][j] += grid[i][j-1] } else { grid[i][j] += grid[i-1][j] } } } } return grid[m-1][n-1] }  </description>
    </item>
    
    <item>
      <title>最长回文子串</title>
      <link>/blog/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</link>
      <pubDate>Sun, 09 Dec 2018 16:51:09 +0800</pubDate>
      
      <guid>/blog/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</guid>
      <description> 问题描述 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。
示例 1 输入: &amp;quot;babad&amp;quot; 输出: &amp;quot;bab&amp;quot; 注意: &amp;quot;aba&amp;quot;也是一个有效答案。  示例 2 输入: &amp;quot;cbbd&amp;quot; 输出: &amp;quot;bb&amp;quot;  思路 回文中心的两侧互为镜像。回文可以从它的中心展开，并且只有2n-1个这样的中心。
实现 func longestPalindrome(s string) string { lenS := len(s) if lenS &amp;lt;= 1 { return s } minStart, maxLen, i := 0, 1, 0 for i &amp;lt; lenS { if lenS-i &amp;lt;= maxLen/2 { break } j, k := i, i for k &amp;lt; lenS-1 &amp;amp;&amp;amp; s[k] == s[k+1] { k += 1 } i = k + 1 for k &amp;lt; lenS-1 &amp;amp;&amp;amp; j &amp;gt; 0 &amp;amp;&amp;amp; s[k+1] == s[j-1] { k, j = k+1, j-1 } if k-j+1 &amp;gt; maxLen { minStart, maxLen = j, k-j+1 } } return s[minStart : minStart+maxLen] }  </description>
    </item>
    
    <item>
      <title>字符串转整数 Atoi</title>
      <link>/blog/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0-atoi/</link>
      <pubDate>Sun, 09 Dec 2018 16:50:05 +0800</pubDate>
      
      <guid>/blog/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0-atoi/</guid>
      <description>问题描述 请你来实现一个 atoi 函数，使其能将字符串转换成整数。
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
在任何情况下，若函数不能进行有效的转换时，请返回 0。
说明：
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−2^31^, 2^31 ^− 1]。如果数值超过这个范围，qing返回 INT_MAX (2^31 ^− 1) 或 INT_MIN (−2^31^) 。
示例 1 输入: &amp;quot;42&amp;quot; 输出: 42  示例 2 输入: &amp;quot; -42&amp;quot; 输出: -42 解释: 第一个非空白字符为 &#39;-&#39;, 它是一个负号。 我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。  示例 3 输入: &amp;quot;4193 with words&amp;quot; 输出: 4193 解释: 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。  示例 4 输入: &amp;quot;words and 987&amp;quot; 输出: 0 解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。 因此无法执行有效的转换。  示例 5 输入: &amp;quot;-91283472332&amp;quot; 输出: -2147483648 解释: 数字 &amp;quot;-91283472332&amp;quot; 超过 32 位有符号整数范围。 因此返回 INT_MIN (−231) 。  思路 注意越界即可</description>
    </item>
    
  </channel>
</rss>