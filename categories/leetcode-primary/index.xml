<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode-primary on Wound</title>
    <link>/categories/leetcode-primary/</link>
    <description>Recent content in leetcode-primary on Wound</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Dec 2018 12:53:52 +0800</lastBuildDate>
    
	<atom:link href="/categories/leetcode-primary/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从排序数组中删除重复项</title>
      <link>/blog/%E4%BB%8E%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</link>
      <pubDate>Sat, 08 Dec 2018 12:53:52 +0800</pubDate>
      
      <guid>/blog/%E4%BB%8E%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid>
      <description>问题描述 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
示例 1 给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。  示例 2 给定 nums = [0,0,1,1,1,2,2,3,3,4], 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。 你不需要考虑数组中超出新长度后面的元素。  实现 C++ 版本 使用了 stl 库中的方法 unique 和 erase，最后使用 size 方法返回长度
unique 的是实现原理是，比较两个相邻的元素，如果元素相同则将它移到最后去，并且最后返回一个非冗余元素的迭代器
然后用 erase 删除冗余的元素。
static bool init = []() { ios::sync_with_stdio(false); cin.tie(nullptr); return true; }(); class Solution { public: int removeDuplicates(vector&amp;lt;int&amp;gt;&amp;amp; nums) { nums.</description>
    </item>
    
    <item>
      <title>买卖股票的最佳时机-II</title>
      <link>/blog/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-ii/</guid>
      <description> 问题描述 给定一个数组，它的第 *i* 个元素是一支给定股票第 *i* 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。  示例 2 输入: [1,2,3,4,5] 输出: 4 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。  示例 3 输入: [7,6,4,3,1] 输出: 0 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。  实现 Go 版本 func maxProfit(prices []int) int { var max int for i := 1; i &amp;lt; len(prices); i++ { if prices[i] &amp;gt; prices[i-1] { max += prices[i] - prices[i-1] } } return max }  Go 测试 </description>
    </item>
    
    <item>
      <title>位1的个数</title>
      <link>/blog/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>问题描述 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
示例 1 输入: 11 输出: 3 解释: 整数 11 的二进制表示为 00000000000000000000000000001011  示例 2 输入: 128 输出: 1 解释: 整数 128 的二进制表示为 00000000000000000000000010000000  解法 bits.OnesCount 注意到 Go 的 bits 包提供了 OnesCount 方法，即返回参数的二进制表示中 1 的个数
func hanmingWeight(n uint) int { return bits.OnesCount(n) }  普通计数 按位与操作(&amp;amp;)，按二进制位进行“与”运算，运算规则： 0 &amp;amp; 0 = 0; 0 &amp;amp; 1 = 0; 1 &amp;amp; 0 = 0; 1 &amp;amp; 1 = 1;</description>
    </item>
    
    <item>
      <title>分发饼干</title>
      <link>/blog/%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</guid>
      <description> 问题描述 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 g~i ，~这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 s~j ~。如果 s~j~ &amp;gt;= g~i ~，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
注意：
你可以假设胃口值为正。 一个小朋友最多只能拥有一块饼干。
示例 1 输入: [1,2,3], [1,1] 输出: 1 解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。 所以你应该输出1。  示例 2 输入: [1,2], [1,2,3] 输出: 2 解释: 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。 你拥有的饼干数量和尺寸都足以让所有孩子满足。 所以你应该输出2.  实现 import ( &amp;quot;sort&amp;quot; ) func findContentChildren(g []int, s []int) int { sort.Ints(g) sort.Ints(s) var i, j, res int for i &amp;lt; len(g) &amp;amp;&amp;amp; j &amp;lt; len(s) { if g[i] &amp;lt;= s[j] { res++ i++ } j++ } return res }  </description>
    </item>
    
    <item>
      <title>删除链表中的节点</title>
      <link>/blog/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</guid>
      <description>问题描述 请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。
现有一个链表 &amp;ndash; head = [4,5,1,9]，它可以表示为:
 4 -&amp;gt; 5 -&amp;gt; 1 -&amp;gt; 9  示例 1 输入: head = [4,5,1,9], node = 5 输出: [4,1,9] 解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9.  示例 2 输入: head = [4,5,1,9], node = 1 输出: [4,5,9] 解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 5 -&amp;gt; 9.  思路1 &amp;quot;Dummy node&amp;quot; 节点 能大大简化链接列表问题。但是该题是一个单向链表
故不能使用删除目标的前驱节点的后继改为目标节点的后继，思考一下，可以把要删除的节点直接赋值后继节点值然后直接删除其后继节点，可以达到相同的目的。
例子：ABCDE，删除C，我们就先用D占C的位置，变成ABDDE，然后把后面那个D删除，就可以得到ABDE
思路2 直接把给定的节点B替换成其后的节点C
实现 Go 版本1 /** * Definition for singly-linked list.</description>
    </item>
    
    <item>
      <title>打家劫舍</title>
      <link>/blog/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</guid>
      <description>问题描述 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
示例 1 输入: [1,2,3,1] 输出: 4 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。 偷窃到的最高金额 = 1 + 3 = 4 。  示例 2 输入: [2,7,9,3,1] 输出: 12 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。 偷窃到的最高金额 = 2 + 9 + 1 = 12 。  思路 先分析，原子问题就是这个房间是否要偷。 两种情况，（设收益f（n）为前n个房间的最高收益） 1.</description>
    </item>
    
    <item>
      <title>旋转数组</title>
      <link>/blog/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</guid>
      <description> 问题描述 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
示例 1 输入: [1,2,3,4,5,6,7] 和 k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右旋转 1 步: [7,1,2,3,4,5,6] 向右旋转 2 步: [6,7,1,2,3,4,5] 向右旋转 3 步: [5,6,7,1,2,3,4]  示例 2 输入: [-1,-100,3,99] 和 k = 2 输出: [3,99,-1,-100] 解释: 向右旋转 1 步: [99,-1,-100,3] 向右旋转 2 步: [3,99,-1,-100]  思路 对应的两数互换即可
实现 Go 版本 func rotate(nums []int, k int) { if len(nums) &amp;lt;= 1 || k &amp;lt;= 0 || k%len(nums) == 0 { return } length := len(nums) k = k % length tmp := nums[0] index := 0 start := 0 for i := 0; i &amp;lt; length; i++ { index = (index + k) % length tmp, nums[index] = nums[index], tmp if start == index { start += 1 index = start tmp = nums[start] } } return }  </description>
    </item>
    
    <item>
      <title>求众数</title>
      <link>/blog/%E6%B1%82%E4%BC%97%E6%95%B0/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E6%B1%82%E4%BC%97%E6%95%B0/</guid>
      <description> 问题描述 给定一个大小为 *n *的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。
你可以假设数组是非空的，并且给定的数组总是存在众数。
示例 1 输入: [3,2,3] 输出: 3  示例 2 输入: [2,2,1,1,1,2,2] 输出: 2  实现 Go 版本 func majorityElement(nums []int) int { standard := len(nums)/2 record := make(map[int]int) for i := 0; i &amp;lt; len(nums); i++{ record[nums[i]]++ if record[nums[i]] &amp;gt; standard{ return nums[i] } } return 0 }  </description>
    </item>
    
    <item>
      <title>长度最小的子数组</title>
      <link>/blog/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 08 Dec 2018 12:43:36 +0800</pubDate>
      
      <guid>/blog/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</guid>
      <description> 问题描述 给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。
示例  输入: s = 7, nums = [2,3,1,2,4,3] 输出: 2 解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。  思路 使用一个可以扩张收缩的窗口来实现 窗口使用两个索引 l 和 r ，相当与一个滑块，滑块包含 nums[l&amp;hellip;r] 这些元素，如果 nums[l..r] 的和小于目标值 s，那么 r 向后移一位，再次比较，直到大于目标值 s 之后，l 向前移动一位，缩小数组的长度。 遍历直到 right 到达数组末端。
实现 Go 版本 func minSubArrayLen(s int, nums []int) int { n := len(nums) result := n + 1 sum := 0 l, r := 0, -1 for l &amp;lt; n { if r+1 &amp;lt; n &amp;amp;&amp;amp; sum &amp;lt; s { r++ sum += nums[r] } else { sum -= nums[l] l++ } if sum &amp;gt;= s { if r-l+1 &amp;lt; result { result = r - l + 1 } } } if result == n+1 { result = 0 } return result }  </description>
    </item>
    
    <item>
      <title>到最近的人的最大距离</title>
      <link>/blog/%E5%88%B0%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%BA%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/</link>
      <pubDate>Sat, 08 Dec 2018 12:41:53 +0800</pubDate>
      
      <guid>/blog/%E5%88%B0%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%BA%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB/</guid>
      <description> 问题描述 在一排座位（ seats）中，1 代表有人坐在座位上，0 代表座位上是空的。
至少有一个空座位，且至少有一人坐在座位上。
亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。
返回他到离他最近的人的最大距离。
示例 1 输入：[1,0,0,0,1,0,1] 输出：2 解释： 如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。 如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。 因此，他到离他最近的人的最大距离是 2  示例 2 输入：[1,0,0,0] 输出：3 解释： 如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。 这是可能的最大距离，所以答案是 3 。  思路 考虑三种情况，根据 0 个数来计算，最左边或最右边有最多的连续 0 ，那么结果就是相应 0 的个数，如果连续 0 在中间，考虑到连续 0 数量的奇偶，加上 1 再整除 2 。
实现 Go 版本 func maxDistToClosest(seats []int) int { maxDist, cnt := 0, 0 for i := 0; i &amp;lt; len(seats) &amp;amp;&amp;amp; seats[i] == 0; i++ { cnt++ } maxDist = cnt for i := 0; i &amp;lt; len(seats); i++ { if seats[i] == 0 { cnt++ } else { if maxDist &amp;lt; (cnt+1)/2 { maxDist = (cnt + 1) / 2 } cnt = 0 } } if maxDist &amp;lt; cnt { maxDist = cnt } return maxDist }  </description>
    </item>
    
    <item>
      <title>有效的括号</title>
      <link>/blog/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Sat, 08 Dec 2018 12:41:16 +0800</pubDate>
      
      <guid>/blog/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</guid>
      <description>问题描述 给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。
有效字符串需满足：
 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。  注意空字符串可被认为是有效字符串。
示例 1 输入: &amp;quot;()&amp;quot; 输出: true  示例 2 输入: &amp;quot;()[]{}&amp;quot; 输出: true  示例 3 输入: &amp;quot;(]&amp;quot; 输出: false  示例 4 输入: &amp;quot;([)]&amp;quot; 输出: false  示例 5 输入: &amp;quot;{[]}&amp;quot; 输出: true  思路 初始化栈 stack 一次处理表达式的每个括号，遍历给定的 string 如果遇到左括号，推到栈上稍后处理它， 遇到一个右括号，检查栈顶的元素。如果栈顶的元素是一个相同类型的左括号，则从栈中弹出并继续处理。 否则返回 false 最后检查栈中是否有元素，可以判断是否无效
实现 栈方法 func isValid(s string) bool { stack := make([]byte, 0) config := map[byte]byte{ &#39;)&#39;: &#39;(&#39;, &#39;}&#39;: &#39;{&#39;, &#39;]&#39;: &#39;[&#39;, } for i := 0; i &amp;lt; len(s); i++ { b := s[i] if config[b] !</description>
    </item>
    
    <item>
      <title>两数之和</title>
      <link>/blog/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Sat, 08 Dec 2018 12:40:07 +0800</pubDate>
      
      <guid>/blog/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description> 问题描述 给定一个整数数列，找出其中和为特定值的那两个数。
你可以假设每个输入都只会有一种答案，同样的元素不能被重用。
示例 1 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]  思路 1.遍历每个元素 x，并查找是否存在一个值与 target−x相等的目标元素。 2.在进行迭代并将元素插入到表中的同时，检查表中是否已经存在当前元素所对应的目标元素。如果它存在立即将其返回
实现 暴力法 哈希法 func twoSum(nums []int, target int) []int { m := make(map[int]int) for i := 0; i &amp;lt; len(nums); i++ { another := target - nums[i] if _, ok := m[another]; ok { return []int{m[another], i} } m[nums[i]] = i } return nil }  </description>
    </item>
    
    <item>
      <title>设计链表</title>
      <link>/blog/%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 07 Dec 2018 11:21:45 +0800</pubDate>
      
      <guid>/blog/%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</guid>
      <description>问题描述 设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。
在链表类中实现这些功能：
 get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。 addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。 deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。  示例 MyLinkedList linkedList = new MyLinkedList(); linkedList.addAtHead(1); linkedList.addAtTail(3); linkedList.addAtIndex(1,2); //链表变为1-&amp;gt; 2-&amp;gt; 3 linkedList.get(1); //返回2 linkedList.deleteAtIndex(1); //现在链表是1-&amp;gt; 3 linkedList.get(1); //返回3  提示  所有值都在 [1, 1000] 之内。 操作次数将在 [1, 1000] 之内。 请不要使用内置的 LinkedList 库。  思路 实现很简单，ac有很多坑</description>
    </item>
    
    <item>
      <title>回文数</title>
      <link>/blog/%E5%9B%9E%E6%96%87%E6%95%B0/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E5%9B%9E%E6%96%87%E6%95%B0/</guid>
      <description>问题描述 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
示例 1 输入: 121 输出: true  示例 2 输入: -121 输出: false 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。  示例 3 输入: 10 输出: false 解释: 从右向左读, 为 01 。因此它不是一个回文数。  进阶:
你能不将整数转为字符串来解决这个问题吗？
思路 将数字一半反转，然后将反转后的数字与原始数字另一半进行比较，如果它们是相同的，那么这个数字就是回文。  例如，输入 1221，我们可以将数字“1221”的后半部分从“21”反转为“12”，并将其与前半部分“12”进行比较即可。 负数不是回文。
实现 func isPalindrome(x int) bool { if x &amp;lt; 0 { return false } if (x &amp;lt; 10) { return true } p, k := 0, x for k!</description>
    </item>
    
  </channel>
</rss>